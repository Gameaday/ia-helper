plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'dev.flutter.flutter-gradle-plugin'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

// Function to get version info from git
def getGitVersionInfo() {
    def versionName = '1.0.0'
    def versionCode = '1'
    
    try {
        // Get the latest git tag for version name
        def tagProcess = 'git describe --tags --abbrev=0'.execute()
        tagProcess.waitFor()
        if (tagProcess.exitValue() == 0) {
            def tag = tagProcess.text.trim()
            if (tag.startsWith('v')) {
                versionName = tag.substring(1)
            } else {
                versionName = tag
            }
        }
        
        // Get commit count for version code
        def commitCountProcess = 'git rev-list --count HEAD'.execute()
        commitCountProcess.waitFor()
        if (commitCountProcess.exitValue() == 0) {
            versionCode = commitCountProcess.text.trim()
        }
    } catch (Exception e) {
        println "Warning: Could not get git version info: ${e.message}"
        // Fallback to default values
    }
    
    return ['versionName': versionName, 'versionCode': versionCode]
}

// Version management with automated build numbers
def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
def flutterVersionName = localProperties.getProperty('flutter.versionName')

// Auto-generate version from git if not specified
if (flutterVersionCode == null || flutterVersionName == null) {
    def gitVersionInfo = getGitVersionInfo()
    if (flutterVersionCode == null) {
        flutterVersionCode = gitVersionInfo['versionCode']
    }
    if (flutterVersionName == null) {
        flutterVersionName = gitVersionInfo['versionName']
    }
}

// Load keystore properties for release builds
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace 'com.gameaday.internet_archive_helper'
    compileSdk 36
    // NDK version - Flutter may use side-by-side NDK from Android SDK automatically
    // Not explicitly required for pure Dart implementation
    // If you have build issues, ensure Android SDK includes side-by-side NDK
    // ndkVersion can be omitted to use the side-by-side NDK from Android SDK

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    // Product flavors for different environments
    flavorDimensions "environment"
    productFlavors {
        development {
            dimension "environment"
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
            resValue "string", "app_name", "Internet Archive Helper (Dev)"
            buildConfigField "String", "ENVIRONMENT", '"development"'
            buildConfigField "boolean", "DEBUG_MODE", "true"
            manifestPlaceholders = [
                applicationName: "io.flutter.app.FlutterApplication",
                appIcon: "@mipmap/ic_launcher",
                networkSecurityConfig: "@xml/network_security_config_dev"
            ]
        }
        
        staging {
            dimension "environment"
            applicationIdSuffix ".staging"
            versionNameSuffix "-staging"
            resValue "string", "app_name", "Internet Archive Helper (Staging)"
            buildConfigField "String", "ENVIRONMENT", '"staging"'
            buildConfigField "boolean", "DEBUG_MODE", "true"
            manifestPlaceholders = [
                applicationName: "io.flutter.app.FlutterApplication",
                appIcon: "@mipmap/ic_launcher",
                networkSecurityConfig: "@xml/network_security_config_staging"
            ]
        }
        
        production {
            dimension "environment"
            resValue "string", "app_name", "Internet Archive Helper"
            buildConfigField "String", "ENVIRONMENT", '"production"'
            buildConfigField "boolean", "DEBUG_MODE", "false"
            manifestPlaceholders = [
                applicationName: "io.flutter.app.FlutterApplication",
                appIcon: "@mipmap/ic_launcher",
                networkSecurityConfig: "@xml/network_security_config"
            ]
        }
    }

    defaultConfig {
        applicationId "com.gameaday.internet_archive_helper"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion 36
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        
        // Enable multidex for large APKs
        multiDexEnabled true
        
        // Native library architecture (removed x86 for Play Store compliance)
        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86_64'
        }
        
        // Test instrumentation runner
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        
        // Vector drawables support
        vectorDrawables.useSupportLibrary true
    }

    signingConfigs {
        debug {
            storeFile file('../debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        
        upload {
            if (keystoreProperties['uploadKeyStore']) {
                keyAlias keystoreProperties['uploadKeyAlias']
                keyPassword keystoreProperties['uploadKeyPassword'] 
                storeFile file(keystoreProperties['uploadKeyStore'])
                storePassword keystoreProperties['uploadStorePassword']
            } else {
                // Fallback to debug keystore if upload keystore not available
                storeFile file('../debug.keystore')
                storePassword 'android'
                keyAlias 'androiddebugkey'
                keyPassword 'android'
                println "Warning: Upload keystore not found, using debug keystore for upload signing"
            }
        }
        
        release {
            if (keystoreProperties['storeFile']) {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            } else if (keystoreProperties['uploadKeyStore']) {
                // Fallback to upload keystore
                keyAlias keystoreProperties['uploadKeyAlias']
                keyPassword keystoreProperties['uploadKeyPassword']
                storeFile file(keystoreProperties['uploadKeyStore'])
                storePassword keystoreProperties['uploadStorePassword']
                println "Warning: Release keystore not found, using upload keystore for release signing"
            } else {
                // Final fallback to debug keystore for CI builds
                storeFile file('../debug.keystore')
                storePassword 'android'
                keyAlias 'androiddebugkey'
                keyPassword 'android'
                println "Warning: No production keystore found, using debug keystore for release signing (CI build)"
            }
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            debuggable true
            minifyEnabled false
            shrinkResources false
            
            // Build config fields for debugging
            buildConfigField "String", "VERSION_NAME", "\"${flutterVersionName}\""
            buildConfigField "int", "VERSION_CODE", "${flutterVersionCode}"
            buildConfigField "String", "BUILD_TYPE", "\"debug\""
            buildConfigField "long", "BUILD_TIME", "${System.currentTimeMillis()}L"
        }
        
        profile {
            signingConfig signingConfigs.debug
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            
            // Build config fields for profiling
            buildConfigField "String", "VERSION_NAME", "\"${flutterVersionName}\""
            buildConfigField "int", "VERSION_CODE", "${flutterVersionCode}"
            buildConfigField "String", "BUILD_TYPE", "\"profile\""
            buildConfigField "long", "BUILD_TIME", "${System.currentTimeMillis()}L"
        }
        
        release {
            // Use release signing config (which handles fallback internally)
            signingConfig signingConfigs.release
            
            // Production optimizations
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            
            // Build config fields
            buildConfigField "String", "VERSION_NAME", "\"${flutterVersionName}\""
            buildConfigField "int", "VERSION_CODE", "${flutterVersionCode}"
            buildConfigField "String", "BUILD_TYPE", "\"release\""
            buildConfigField "long", "BUILD_TIME", "${System.currentTimeMillis()}L"
            
            // Disable debugging
            debuggable false
            jniDebuggable false
            // renderscriptDebuggable removed (obsolete since AGP 7.0+)
            
            // Additional optimizations for Play Store
            zipAlignEnabled true
            crunchPngs true
        }
    }

    // App Bundle configuration for Play Store
    bundle {
        language {
            // Enable language splits for smaller downloads
            enableSplit = true
        }
        density {
            // Enable density splits for smaller downloads  
            enableSplit = true
        }
        abi {
            // Enable ABI splits for smaller downloads
            enableSplit = true
        }
    }

    // Lint options for Play Store compliance
    lintOptions {
        checkReleaseBuilds true
        abortOnError false
        disable 'InvalidPackage', 'MissingTranslation'
        warningsAsErrors false
        xmlReport true
        htmlReport true
        
        // Play Store specific checks
        enable 'GoogleAppIndexingWarning', 'GoogleAppIndexingUrlError'
    }

    // Packaging options
    packagingOptions {
        pickFirst '**/libc++_shared.so'
        pickFirst '**/libjsc.so'
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.multidex:multidex:2.0.1'
    
    // Core Android libraries - Updated for Play Store compliance
    implementation 'androidx.core:core-ktx:1.15.0'
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.8.7'
    implementation 'androidx.activity:activity-compose:1.9.3'
    
    // Material Design - Latest version
    implementation 'com.google.android.material:material:1.12.0'
    
    // File provider and storage
    implementation 'androidx.core:core:1.15.0'
    
    // Network security and privacy compliance
    implementation 'androidx.security:security-crypto:1.1.0'
    implementation 'androidx.work:work-runtime-ktx:2.10.0'
    
    // Play Core for app updates and feature delivery
    implementation 'com.google.android.play:core:1.10.3'
    implementation 'com.google.android.play:core-ktx:1.8.1'
    
    // Testing dependencies
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    
    // For Play Store compliance and better app performance
    implementation 'androidx.startup:startup-runtime:1.2.0'
}
